// Generated by CoffeeScript 1.3.3

/*
Copyright (C) 2012 Ohso Ltd

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
*/


(function() {
  'use strict';

  var DB_VERSION, chromeVersion, cursorPrev, db, omgApp, omgBackground, omgFeed, omgOptions, omgUtil, readOnly, readWrite;

  omgFeed = "http://feeds.feedburner.com/d0od?format=xml";

  window.indexedDB = window.indexedDB || window.webkitIndexedDB;

  window.IDBTransaction = window.IDBTransaction || window.webkitIDBTransaction;

  window.IDBKeyRange = window.IDBKeyRange || window.webkitIDBKeyRange;

  window.IDBCursor = window.IDBCursor || window.webkitIDBCursor;

  readWrite = typeof IDBTransaction.READ_WRITE === 'undefined' ? 'readwrite' : IDBTransaction.READ_WRITE;

  readOnly = typeof IDBTransaction.READ_ONLY === 'undefined' ? 'readonly' : IDBTransaction.READ_ONLY;

  cursorPrev = typeof IDBTransaction.PREV === 'undefined' ? 'prev' : IDBTransaction.PREV;

  chromeVersion = parseInt(window.navigator.appVersion.match(/Chrome\/(\d+)\./)[1], 10);

  db = void 0;

  DB_VERSION = 1;

  if (typeof localStorage['unread'] === 'undefined') {
    localStorage['unread'] = 0;
  }

  if (typeof localStorage['pollInterval'] === 'undefined') {
    localStorage['pollInterval'] = 600000;
  }

  if (typeof localStorage['notificationsEnabled'] === 'undefined') {
    localStorage['notificationsEnabled'] = true;
  }

  omgBackground = angular.module('omgBackground', ['omgUtil']);

  omgBackground.controller('backgroundCtrl', [
    'databaseService', 'Badge', 'Articles', function(databaseService, Badge, Articles) {
      Badge.notify();
      databaseService.open().then(function(event) {
        return Articles.getLatestArticles();
      });
      return Articles.getArticlesOnTimeout();
    }
  ]);

  omgApp = angular.module('omgApp', ['omgUtil']);

  omgApp.controller('popupCtrl', [
    '$scope', 'databaseService', 'Articles', 'LocalStorage', 'Badge', function($scope, databaseService, Articles, LocalStorage, Badge) {
      Badge.notify();
      databaseService.open().then(function(event) {
        return Articles.getArticles().then(function(articles) {
          return $scope.latestArticles = articles;
        });
      });
      $scope.markAsRead = function(index) {
        if ($scope.latestArticles[index].unread === true) {
          LocalStorage.decrement();
          $scope.latestArticles[index].unread = false;
          return db.transaction(['articles'], readWrite).objectStore('articles').put($scope.latestArticles[index]);
        }
      };
      $scope.markAllAsRead = function() {
        var article, _i, _len, _ref, _results;
        LocalStorage.reset();
        _ref = $scope.latestArticles;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          article = _ref[_i];
          if (article.unread === true) {
            article.unread = false;
            _results.push(db.transaction(['articles'], readWrite).objectStore('articles').put(article));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      };
      $scope.refresh = function() {
        $scope.refreshing = true;
        return databaseService.open().then(function(event) {
          return Articles.getLatestArticles().then(function() {
            return Articles.getArticles().then(function(articles) {
              $scope.latestArticles = articles;
              return $scope.refreshing = false;
            });
          });
        });
      };
      return $scope.optionsPage = function() {
        return chrome.tabs.create({
          url: "options.html"
        });
      };
    }
  ]);

  omgOptions = angular.module('omgOptions', []);

  omgOptions.controller('optionCtrl', [
    '$scope', function($scope) {
      $scope.notificationsEnabled = (localStorage['notificationsEnabled'] === "true" ? true : false);
      $scope.$watch('notificationsEnabled', function(newValue) {
        if (newValue !== (localStorage['notificationsEnabled'] === "true" ? true : false)) {
          return localStorage['notificationsEnabled'] = newValue;
        }
      });
      return $scope.showExampleNotification = function() {
        return webkitNotifications.createNotification('/images/icon48.png', "Example notification", "A summary of the new article or the number of new articles would go here!").show();
      };
    }
  ]);

  omgUtil = angular.module('omgUtil', ['ngResource']);

  omgUtil.service('databaseService', [
    '$q', '$rootScope', function($q, $rootScope) {
      var createStores, open;
      open = function() {
        var deferred, request;
        deferred = $q.defer();
        if (typeof db !== "undefined") {
          deferred.resolve();
        }
        request = indexedDB.open('OMGUbuntu', DB_VERSION);
        request.onerror = function(event) {
          console.log("Couldn't open the database");
          return $rootScope.$apply(function() {
            return deferred.reject("Couldn't open the database");
          });
        };
        request.onsuccess = function(event) {
          var versionReq;
          db = request.result;
          if (chromeVersion <= 22) {
            if (db.version !== "1" || typeof db.version === "undefined") {
              versionReq = db.setVersion(DB_VERSION);
              versionReq.onfailure = function(event) {
                return $rootScope.$apply(function() {
                  return deferred.resolve();
                });
              };
              return versionReq.onsuccess = function(event) {
                createStores();
                return $rootScope.$apply(function() {
                  return deferred.resolve();
                });
              };
            } else {
              return $rootScope.$apply(function() {
                return deferred.resolve();
              });
            }
          } else {
            return $rootScope.$apply(function() {
              return deferred.resolve();
            });
          }
        };
        request.onupgradeneeded = function(event) {
          console.log("Chrome >= 23: Database needs upgrading");
          db = event.target.result;
          createStores();
          return $rootScope.$apply(function() {
            return deferred.resolve();
          });
        };
        return deferred.promise;
      };
      createStores = function() {
        return db.createObjectStore("articles", {
          keyPath: "date"
        });
      };
      return {
        open: open
      };
    }
  ]);

  omgUtil.service('Articles', [
    '$q', '$rootScope', 'LocalStorage', 'Notification', 'databaseService', function($q, $rootScope, LocalStorage, Notification, databaseService) {
      var getArticles, getArticlesOnTimeout, getLatestArticles, _addArticle, _getArticlesFromDatabase;
      getLatestArticles = function() {
        var deferred, promises;
        deferred = $q.defer();
        localStorage['newArticles'] = 0;
        promises = [];
        $.ajax({
          url: omgFeed,
          dataType: 'xml',
          success: function(data) {
            var addArticle, article, articleObj, articleXml, articles, _i, _len;
            articles = $(data).find('rss').find('channel').find('item');
            for (_i = 0, _len = articles.length; _i < _len; _i++) {
              articleXml = articles[_i];
              article = $(articleXml);
              articleObj = {
                title: article.find('title').text(),
                summary: $('<div>' + article.find('description').text() + '</div>').text(),
                link: article.find('origLink').text(),
                date: Date.parse(article.find('pubDate').text()),
                unread: true
              };
              addArticle = _addArticle(articleObj);
              promises.push(addArticle);
            }
            return $q.all(promises).then(function() {
              Notification.start();
              return deferred.resolve();
            });
          },
          error: function() {
            return $rootScope.$apply(function() {
              return deferred.resolve();
            });
          }
        });
        return deferred.promise;
      };
      _addArticle = function(articleObj) {
        var addArticle, deferred;
        deferred = $q.defer();
        addArticle = db.transaction(['articles'], readWrite).objectStore('articles').add(articleObj);
        addArticle.onsuccess = function(event) {
          LocalStorage.increment();
          localStorage['newArticles'] = parseInt(localStorage['newArticles']) + 1;
          return $rootScope.$apply(function() {
            return deferred.resolve();
          });
        };
        addArticle.onerror = function(event) {
          $rootScope.$apply(function() {
            return deferred.resolve();
          });
        };
        return deferred.promise;
      };
      _getArticlesFromDatabase = function() {
        var articles, deferred, objectStore, totalCount;
        deferred = $q.defer();
        articles = [];
        totalCount = 0;
        objectStore = db.transaction(['articles'], readOnly).objectStore('articles');
        objectStore.openCursor(null, cursorPrev).onsuccess = function(event) {
          var cursor;
          cursor = event.target.result;
          if (cursor) {
            totalCount++;
            if (articles.length < 20) {
              articles.push(cursor.value);
            } else if (totalCount > 30) {
              if (cursor.value.unread === true) {
                LocalStorage.decrement();
              }
              db.transaction(['articles'], readWrite).objectStore('articles')["delete"](cursor.key);
            }
            return cursor["continue"]();
          } else {
            return $rootScope.$apply(function() {
              return deferred.resolve(articles);
            });
          }
        };
        return deferred.promise;
      };
      getArticles = function() {
        var deferred, objectStore;
        deferred = $q.defer();
        objectStore = db.transaction(['articles'], readOnly).objectStore('articles');
        objectStore.count().onsuccess = function(event) {
          if (event.target.result < 20) {
            return getLatestArticles().then(function() {
              return _getArticlesFromDatabase().then(function(articles) {
                return deferred.resolve(articles);
              });
            });
          } else {
            return _getArticlesFromDatabase().then(function(articles) {
              return deferred.resolve(articles);
            });
          }
        };
        return deferred.promise;
      };
      getArticlesOnTimeout = function() {
        return setTimeout(function() {
          return databaseService.open().then(function(event) {
            return getLatestArticles().then(function() {
              return getArticles().then(function() {
                return getArticlesOnTimeout();
              });
            });
          });
        }, localStorage['pollInterval']);
      };
      return {
        getArticles: getArticles,
        getArticlesOnTimeout: getArticlesOnTimeout,
        getLatestArticles: getLatestArticles
      };
    }
  ]);

  omgUtil.filter('truncate', function() {
    return function(input, count) {
      var final, i, truncated, truncatedTest, _i, _ref;
      final = input;
      if (typeof input === "undefined") {
        return "";
      }
      if (input.length <= count) {
        return final;
      }
      truncated = input.substring(0, count);
      if (truncated.substring(truncated.length - 1).match(/\s/)) {
        final = truncated;
      }
      if (input.substring(truncated.length, truncated.length + 1).match(/\s/)) {
        final = truncated;
      }
      for (i = _i = 1, _ref = truncated.length - 1; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
        truncatedTest = truncated.substring(truncated.length - i, truncated.length - (i - 1));
        if (truncatedTest.match(/\s/)) {
          final = truncated.substring(0, truncated.length - i);
          break;
        }
      }
      return final + "...";
    };
  });

  omgUtil.filter('uriEncode', function() {
    return function(input) {
      return encodeURIComponent(input);
    };
  });

  omgUtil.service('Badge', [
    function() {
      var notify;
      notify = function() {
        if (localStorage['unread'] === "0") {
          chrome.browserAction.setBadgeText({
            text: ""
          });
          return chrome.browserAction.setIcon({
            path: '/images/icon_unread19.png'
          });
        } else {
          chrome.browserAction.setBadgeText({
            text: localStorage['unread']
          });
          return chrome.browserAction.setIcon({
            path: '/images/icon19.png'
          });
        }
      };
      return {
        notify: notify
      };
    }
  ]);

  omgUtil.service('LocalStorage', [
    'Badge', function(Badge) {
      var decrement, increment, reset;
      increment = function() {
        localStorage['unread'] = parseInt(localStorage['unread']) + 1;
        return Badge.notify();
      };
      decrement = function() {
        if (localStorage['unread'] === "0") {
          return;
        }
        localStorage['unread'] = parseInt(localStorage['unread']) - 1;
        return Badge.notify();
      };
      reset = function() {
        localStorage['unread'] = 0;
        return Badge.notify();
      };
      return {
        increment: increment,
        decrement: decrement,
        reset: reset
      };
    }
  ]);

  omgUtil.service('Notification', [
    '$filter', function($filter) {
      var multiNotify, singleNotify, start;
      start = function() {
        var objectStore;
        if (localStorage['notificationsEnabled'] === "false") {
          return;
        }
        if (localStorage['newArticles'] === "0") {
          return;
        }
        if (localStorage['newArticles'] === "1") {
          objectStore = db.transaction(['articles'], readOnly).objectStore('articles');
          objectStore.openCursor(null, cursorPrev).onsuccess = function(event) {
            var cursor;
            cursor = event.target.result;
            if (cursor) {
              return singleNotify(cursor.value);
            }
          };
        }
        if (localStorage['newArticles'] > 1) {
          return multiNotify(localStorage['newArticles']);
        }
      };
      singleNotify = function(article) {
        var notification;
        if (localStorage['notificationsEnabled'] === "false") {
          return;
        }
        notification = webkitNotifications.createNotification('/images/icon48.png', "New article! " + article.title, "" + ($filter('truncate')(article.summary, 100)));
        notification.show();
        return setTimeout(function() {
          return notification.cancel();
        }, 7500);
      };
      multiNotify = function(number) {
        var notification;
        if (localStorage['notificationsEnabled'] === "false") {
          return;
        }
        notification = webkitNotifications.createNotification('/images/icon48.png', 'New articles!', "" + number + " new articles on OMG! Ubuntu!");
        notification.show();
        return setTimeout(function() {
          return notification.cancel();
        }, 7500);
      };
      return {
        start: start,
        singleNotify: singleNotify,
        multiNotify: multiNotify
      };
    }
  ]);

}).call(this);
