// Generated by CoffeeScript 1.3.3
(function() {
  'use strict';

  var DB_VERSION, chromeVersion, db, omgApp, omgBackground, omgFeed, omgUtil;

  omgFeed = "http://feeds.feedburner.com/d0od?format=xml";

  window.indexedDB = window.indexedDB || window.webkitIndexedDB;

  window.IDBTransaction = window.IDBTransaction || window.webkitIDBTransaction;

  window.IDBKeyRange = window.IDBKeyRange || window.webkitIDBKeyRange;

  window.IDBCursor = window.IDBCursor || window.webkitIDBCursor;

  chromeVersion = parseInt(window.navigator.appVersion.match(/Chrome\/(\d+)\./)[1], 10);

  db = void 0;

  DB_VERSION = 1;

  if (typeof localStorage['unread'] === 'undefined') {
    localStorage['unread'] = 0;
  }

  if (typeof localStorage['pollInterval'] === 'undefined') {
    localStorage['pollInterval'] = 600000;
  }

  omgBackground = angular.module('omgBackground', ['omgUtil']);

  omgBackground.controller('backgroundCtrl', [
    'databaseService', 'Badge', 'Articles', function(databaseService, Badge, Articles) {
      Badge.notify();
      databaseService.open().then(function(event) {
        return Articles.getArticles();
      });
      return Articles.getArticlesOnTimeout();
    }
  ]);

  omgApp = angular.module('omgApp', ['omgUtil']);

  omgApp.controller('popupCtrl', [
    '$scope', 'databaseService', 'Articles', 'LocalStorage', 'Badge', function($scope, databaseService, Articles, LocalStorage, Badge) {
      Badge.notify();
      databaseService.open().then(function(event) {
        return Articles.getArticles().then(function(articles) {
          console.log(articles);
          return $scope.latestArticles = articles;
        });
      });
      $scope.markAsRead = function(index) {
        LocalStorage.decrement();
        if ($scope.latestArticles[index].unread === true) {
          $scope.latestArticles[index].unread = false;
          return db.transaction(['articles'], 'readwrite').objectStore('articles').put($scope.latestArticles[index]);
        }
      };
      return $scope.markAllAsRead = function() {
        var article, _i, _len, _ref, _results;
        LocalStorage.reset();
        _ref = $scope.latestArticles;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          article = _ref[_i];
          if (article.unread === true) {
            article.unread = false;
            _results.push(db.transaction(['articles'], 'readwrite').objectStore('articles').put(article));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      };
    }
  ]);

  omgUtil = angular.module('omgUtil', ['ngResource']);

  omgUtil.service('databaseService', [
    '$q', '$rootScope', function($q, $rootScope) {
      var createStores, open;
      open = function() {
        var deferred, request;
        deferred = $q.defer();
        if (typeof db !== "undefined") {
          deferred.resolve();
        }
        request = indexedDB.open('OMGUbuntu', DB_VERSION);
        request.onerror = function(event) {
          console.log("Couldn't open the database");
          return $rootScope.$apply(function() {
            return deferred.reject("Couldn't open the database");
          });
        };
        request.onsuccess = function(event) {
          var versionReq;
          console.log("Opened db " + request.result.version + " successfully");
          db = request.result;
          if (chromeVersion <= 22) {
            if (db.version !== "1" || typeof db.version === "undefined") {
              versionReq = db.setVersion(DB_VERSION);
              versionReq.onfailure = function() {
                return $rootScope.$apply(function() {
                  return deferred.resolve();
                });
              };
              return versionReq.onsuccess = function(event) {
                return createStores().then(function() {
                  return deferred.resolve();
                });
              };
            } else {
              return $rootScope.$apply(function() {
                return deferred.resolve();
              });
            }
          } else {
            return $rootScope.$apply(function() {
              return deferred.resolve();
            });
          }
        };
        request.onupgradeneeded = function(event) {
          console.log("Chrome >= 23: Database needs upgrading");
          db = event.target.result;
          return createStores().then(function() {
            return deferred.resolve();
          });
        };
        return deferred.promise;
      };
      createStores = function() {
        var createEvent, deferred;
        deferred = $q.defer();
        createEvent = db.createObjectStore("articles", {
          keyPath: "date"
        });
        createEvent.onsuccess = function(event) {
          console.log("Successfully created object stores");
          return $rootScope.$apply(function() {
            return deferred.resolve();
          });
        };
        return deferred.promise;
      };
      return {
        open: open
      };
    }
  ]);

  omgUtil.service('Articles', [
    '$q', '$rootScope', 'LocalStorage', function($q, $rootScope, LocalStorage) {
      var getArticles, getArticlesOnTimeout, _addArticle, _getArticlesFromDatabase, _getLatestArticles;
      _getLatestArticles = function() {
        var deferred, promises;
        deferred = $q.defer();
        promises = [];
        $.ajax({
          url: omgFeed,
          dataType: 'xml',
          success: function(data) {
            var addArticle, article, articleObj, articleXml, articles, _i, _len;
            articles = $(data).find('rss').find('channel').find('item');
            for (_i = 0, _len = articles.length; _i < _len; _i++) {
              articleXml = articles[_i];
              article = $(articleXml);
              articleObj = {
                title: article.find('title').text(),
                summary: $('<div>' + article.find('description').text() + '</div>').text(),
                link: article.find('origLink').text(),
                date: moment(article.find('pubDate').text(), 'ddd, DD MMM YYYY HH:mm:ss PST').valueOf(),
                unread: true
              };
              addArticle = _addArticle(articleObj);
              promises.push(addArticle);
            }
            return $q.all(promises).then(function() {
              return deferred.resolve();
            });
          },
          error: function() {
            return $rootScope.$apply(function() {
              return deferred.reject("Issue getting articles");
            });
          }
        });
        return deferred.promise;
      };
      _addArticle = function(articleObj) {
        var addArticle, deferred;
        deferred = $q.defer();
        addArticle = db.transaction(['articles'], 'readwrite').objectStore('articles').add(articleObj);
        addArticle.onsuccess = function(event) {
          LocalStorage.increment();
          return $rootScope.$apply(function() {
            return deferred.resolve();
          });
        };
        addArticle.onerror = function(event) {
          $rootScope.$apply(function() {
            return deferred.resolve();
          });
        };
        return deferred.promise;
      };
      _getArticlesFromDatabase = function() {
        var articles, deferred, objectStore;
        deferred = $q.defer();
        articles = [];
        objectStore = db.transaction(['articles'], 'readonly').objectStore('articles');
        objectStore.openCursor(null, "prev").onsuccess = function(event) {
          var cursor;
          cursor = event.target.result;
          if (cursor) {
            console.log(cursor);
            if (articles.length < 20) {
              articles.push(cursor.value);
            } else {
              console.log("Would delete " + cursor.value.title);
              db.transaction(['articles'], 'readwrite').objectStore('articles')["delete"](cursor.key);
            }
            return cursor["continue"]();
          } else {
            return $rootScope.$apply(function() {
              return deferred.resolve(articles);
            });
          }
        };
        return deferred.promise;
      };
      getArticles = function() {
        var deferred, objectStore;
        deferred = $q.defer();
        objectStore = db.transaction(['articles'], 'readonly').objectStore('articles');
        objectStore.count().onsuccess = function(event) {
          if (event.target.result < 20) {
            return _getLatestArticles().then(function() {
              return _getArticlesFromDatabase().then(function(articles) {
                return deferred.resolve(articles);
              });
            });
          } else {
            return _getArticlesFromDatabase().then(function(articles) {
              return deferred.resolve(articles);
            });
          }
        };
        return deferred.promise;
      };
      getArticlesOnTimeout = function() {
        return setTimeout(function() {
          console.log("Timeout going!");
          return getArticles();
        }, localStorage['pollInterval']);
      };
      return {
        getArticles: getArticles,
        getArticlesOnTimeout: getArticlesOnTimeout
      };
    }
  ]);

  omgUtil.filter('truncate', function() {
    return function(input, count) {
      var final, i, truncated, truncatedTest, _i, _ref;
      final = input;
      if (input === void 0) {
        return "";
      }
      if (input.length <= count) {
        return final;
      }
      truncated = input.substring(0, count);
      if (truncated.substring(truncated.length - 1).match(/\s/)) {
        final = truncated;
      }
      if (input.substring(truncated.length, truncated.length + 1).match(/\s/)) {
        final = truncated;
      }
      for (i = _i = 1, _ref = truncated.length - 1; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
        truncatedTest = truncated.substring(truncated.length - i, truncated.length - (i - 1));
        if (truncatedTest.match(/\s/)) {
          final = truncated.substring(0, truncated.length - i);
          break;
        }
      }
      return final + "...";
    };
  });

  omgUtil.service('Badge', [
    function() {
      var notify;
      console.log("Badge!");
      notify = function() {
        if (localStorage['unread'] === "0") {
          console.log("Clearing badge");
          chrome.browserAction.setBadgeText({
            text: ""
          });
          return chrome.browserAction.setIcon({
            path: '/images/icon_unread48.png'
          });
        } else {
          chrome.browserAction.setBadgeText({
            text: localStorage['unread']
          });
          return chrome.browserAction.setIcon({
            path: '/images/icon48.png'
          });
        }
      };
      return {
        notify: notify
      };
    }
  ]);

  omgUtil.service('LocalStorage', [
    'Badge', function(Badge) {
      var decrement, increment, reset;
      increment = function() {
        localStorage['unread'] = parseInt(localStorage['unread']) + 1;
        return Badge.notify();
      };
      decrement = function() {
        localStorage['unread'] = parseInt(localStorage['unread']) - 1;
        return Badge.notify();
      };
      reset = function() {
        localStorage['unread'] = 0;
        return Badge.notify();
      };
      return {
        increment: increment,
        decrement: decrement,
        reset: reset
      };
    }
  ]);

}).call(this);
